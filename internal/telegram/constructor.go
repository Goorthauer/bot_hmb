package telegram

import (
	"bot_hmb/internal/entity"
	"context"
	"fmt"
	"math"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/gofrs/uuid"
)

type Constructor interface {
	ConstructUnknownErrAndSend(ctx context.Context, chatIDs []int64, e error) error
	ConstructUnknownAndSend(ctx context.Context, chatIDs []int64) error
	ConstructUnknownAndSendWithText(ctx context.Context, chatIDs []int64, text string) error
	ConstructInfoAttachedAndSend(ctx context.Context, chatIDs []int64, fullname string) error
	ConstructNextTrainingDayAndSend(ctx context.Context, chatIDs []int64, fioFull, schoolAddress, trainingTime string, date time.Time) error
	ConstructHelpAndSend(ctx context.Context, chatIDs []int64) error
	ConstructMasterHelpAndSend(ctx context.Context, chatIDs []int64) error
	ConstructStartAttachedAndSend(ctx context.Context, chatIDs []int64, fioFull string) error
	ConstructStartAutoAndSend(ctx context.Context, chatIDs []int64, username string) error
	ConstructStartManualAndSend(ctx context.Context, chatIDs []int64, username string) error
	ConstructInfoDetachedAndSend(ctx context.Context, chatIDs []int64) error
	ConstructDetachedAndSend(ctx context.Context, chatIDs []int64) error
	ConstructDetachDetachedAndSend(ctx context.Context, chatIDs []int64) error
	ConstructAttachedAndSend(ctx context.Context, chatIDs []int64, schoolName string) error
	ConstructSubscriptionsAndSend(ctx context.Context, chatIDs []int64, fioFull string, deadline time.Time) error
	ConstructSubscriptionListAndSend(ctx context.Context, chatIDs []int64, fioFull string, userList map[uuid.UUID]entity.User, subs []entity.Subscription) error
	ConstructSubscriptionListAndSendV2(ctx context.Context, chatIDs []int64, fioFull string, userList map[uuid.UUID]entity.User, subs []*entity.PresentsSubscription) error
	ConstructSubscriptionQuizAndSend(ctx context.Context, chatIDs []int64, fioFull string, users []*entity.User) error
	ConstructUserHelpAndSend(ctx context.Context, chatIDs []int64) error
	ConstructRegisterPhone(ctx context.Context, chatID int64) error
	ConstructScheduleAndSend(ctx context.Context, chatIDs []int64, fioFull string, schoolName string, price int, desc string, schedule entity.Schedule) error
	ConstructRegisterWithSchool(ctx context.Context, chatID int64, schools map[uuid.UUID]string) error
	ConstructRegisterWithStep(ctx context.Context, chatID int64, step entity.StepType, data map[uuid.UUID]string) error
	ConstructSubscriptionsFailAndSend(ctx context.Context, chatIDs []int64, fioFull string) error
}

type constructor struct {
	debug  bool
	sender Wrapper
}

func NewConstructor(debug bool, wrapper Wrapper) Constructor {
	return &constructor{debug: debug, sender: wrapper}
}

func (c *constructor) ConstructInfoDetachedAndSend(ctx context.Context, chatIDs []int64) error {
	text := "‚ÑπÔ∏è –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ HMB Schools\\.\n\n" +
		"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ—é —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å üëá"

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–í–æ–π—Ç–∏",
					CallbackData: "/start",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructUnknownAndSend(ctx context.Context, chatIDs []int64) error {
	text := "ü§î –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç\\. –ù–æ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É :\\)\n\n" +
		"–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ \\- \\/help"

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–°–ø—Ä–∞–≤–∫–∞",
					CallbackData: "/help",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructUnknownAndSendWithText(ctx context.Context, chatIDs []int64, text string) error {
	text = fmt.Sprintf("ü§î –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ `%s`\\. –ù–æ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É :\\)\n\n"+
		"–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ \\- \\/help", text)

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–°–ø—Ä–∞–≤–∫–∞",
					CallbackData: "/help",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructUnknownErrAndSend(ctx context.Context, chatIDs []int64, e error) error {
	text := "‚õî‚õî‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞\n\\."

	if c.debug {
		text += bot.EscapeMarkdown(e.Error())
	}

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–°–ø—Ä–∞–≤–∫–∞",
					CallbackData: "/help",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructInfoAttachedAndSend(ctx context.Context, chatIDs []int64, fullname string) error {
	text := fmt.Sprintf(
		"‚ÑπÔ∏è –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ *%s*"+
			"\n\n"+
			"–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /detach –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
		fullname,
	)

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         fmt.Sprintf("–í—ã–π—Ç–∏ –∏–∑ %s", fullname),
					CallbackData: "/detach",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, bot.EscapeMarkdown(text), kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructSubscriptionListAndSend(ctx context.Context, chatIDs []int64, fioFull string, userList map[uuid.UUID]entity.User, subs []entity.Subscription) error {
	text := fmt.Sprintf(
		`%s, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –≤–∞—à–µ–π —à–∫–æ–ª—ã:
`, fioFull)
	if len(subs) == 0 || len(userList) == 0 {
		text = fmt.Sprintf(
			`%s, –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.
—á—Ç–æ –±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç - –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/set_subscriptions {–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π} {*—Ü–µ–Ω–∞}
`, fioFull)
	}
	for _, v := range subs {
		var user entity.User
		var ok bool
		if user, ok = userList[v.UserID]; !ok {
			continue
		}
		danger := ""
		dur := time.Since(v.DeadlineAt)
		dayExp := math.Round(-dur.Hours() / 24)
		switch {
		case dayExp == 0:
			danger = "(‚ö†Ô∏è–∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è) "
		case dayExp < 0:
			danger = "‚ÄºÔ∏è–∑–∞–∫–æ–Ω—á–∏–ª—Å—è - "
		case dayExp < 3:
			danger = fmt.Sprintf(`(–∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ %v –¥–Ω–µ–π) `, dayExp)
		}

		text += fmt.Sprintf(
			`
üí™ %s(%s) - –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–æ %s%s;
`,
			user.PersonalData.GetFullName(), user.Phone, danger, v.DeadlineAt.Format(time.DateOnly))
	}
	err := c.sendMessageToChatIDs(ctx, bot.EscapeMarkdown(text), chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructSubscriptionListAndSendV2(ctx context.Context, chatIDs []int64, fioFull string, userList map[uuid.UUID]entity.User, subs []*entity.PresentsSubscription) error {
	text := fmt.Sprintf(
		`%s, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –≤–∞—à–µ–π —à–∫–æ–ª—ã:
`, fioFull)
	if len(subs) == 0 || len(userList) == 0 {
		text = fmt.Sprintf(
			`%s, –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.
—á—Ç–æ –±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç - –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/set_subscriptions {–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π} {*—Ü–µ–Ω–∞}
`, fioFull)
	}
	for _, v := range subs {
		if v == nil {
			continue
		}
		var user entity.User
		var ok bool
		if user, ok = userList[v.UserID]; !ok {
			continue
		}
		danger := ""
		if v.LostDays >= v.CountTraining {
			dur := time.Since(v.DeadlineAt)
			dayExp := math.Round(-dur.Hours() / 24)
			switch {
			case dayExp == 0:
				danger = "(‚ö†Ô∏è–∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è) "
			case dayExp < 0:
				danger = "‚ÄºÔ∏è–∑–∞–∫–æ–Ω—á–∏–ª—Å—è - "
			case dayExp < 3:
				danger = fmt.Sprintf(`(–∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ %v –¥–Ω–µ–π) `, dayExp)
			}
		} else {
			danger = "‚ÄºÔ∏è–∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Ç.–∫. –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π "
		}

		text += fmt.Sprintf(
			`
üí™ %s(%s) - –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–æ %s%s(–æ—Å—Ç–∞–ª–æ—Å—å %v –∑–∞–Ω—è—Ç–∏–π);
`,
			user.PersonalData.GetFullName(), user.Phone, danger, v.DeadlineAt.Format(time.DateOnly),
			v.LostDays-v.CountTraining)
	}
	err := c.sendMessageToChatIDs(ctx, bot.EscapeMarkdown(text), chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructSubscriptionQuizAndSend(ctx context.Context, chatIDs []int64, fioFull string, users []*entity.User) error {
	text := fmt.Sprintf("%s, –û—Ç–º–µ—Ç—å –ª—é–¥–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏.", fioFull)
	if len(users) != 0 {
		err := c.sendMessageToChatIDs(ctx, bot.EscapeMarkdown(text), chatIDs)
		if err != nil {
			return err
		}
	}
	for _, user := range users {
		kb := &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{
						Text:         user.PersonalData.GetFullName(),
						CallbackData: fmt.Sprintf("/present %s", user.ID),
					},
				},
			},
		}
		err := c.sendMessageWithButtonsToChatIDs(ctx, "–±—ã–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\\?", &kb, chatIDs)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *constructor) ConstructSubscriptionsAndSend(ctx context.Context, chatIDs []int64, fioFull string, deadline time.Time) error {
	var text string
	if time.Since(deadline) < 0 {
		text = fmt.Sprintf(`üè∑%s, –≤–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ %s`,
			fioFull,
			deadline.Format(time.DateOnly))
	} else {
		text = fmt.Sprintf(`üè∑%s, –≤–∞—à –∑–∞–∫–æ–Ω—á–∏–ª—Å—è %s`,
			fioFull,
			deadline.Format(time.DateOnly))
	}
	err := c.sendMessageToChatIDs(ctx, bot.EscapeMarkdown(text), chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructSubscriptionsFailAndSend(ctx context.Context, chatIDs []int64, fioFull string) error {
	text := fmt.Sprintf(`üè∑%s, –≤–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µüò≠üò≠üò≠`,
		fioFull)
	err := c.sendMessageToChatIDs(ctx, bot.EscapeMarkdown(text), chatIDs)
	if err != nil {
		return err
	}

	return nil
}
func (c *constructor) ConstructNextTrainingDayAndSend(ctx context.Context, chatIDs []int64, fioFull, schoolAddress, trainingTime string, date time.Time) error {
	text := fmt.Sprintf(`üè∑%s, –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏(–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é):
üïó%v, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç %s –ø–æ –∞–¥—Ä–µ—Å—É %s`,
		fioFull, date.Format(time.DateOnly), trainingTime, schoolAddress)
	err := c.sendMessageToChatIDs(ctx, bot.EscapeMarkdown(text), chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructHelpAndSend(ctx context.Context, chatIDs []int64) error {
	err := c.sendMessageToChatIDs(ctx, getHelpBasicText(), chatIDs)
	if err != nil {
		return err
	}

	return nil
}
func (c *constructor) ConstructUserHelpAndSend(ctx context.Context, chatIDs []int64) error {
	text := getHelpBasicText() + bot.EscapeMarkdown(getHelpUserText())
	err := c.sendMessageToChatIDs(ctx, text, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructRegisterPhone(ctx context.Context, chatID int64) error {
	phoneButton := models.KeyboardButton{
		Text:           "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
		RequestContact: true,
	}

	replyKeyboard := models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{phoneButton},
		},
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}

	text := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n–ö–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7–•–•–•–•–•–•–•–•–•–•"
	err := c.sendMessageWithButtonsToChatIDs(ctx, bot.EscapeMarkdown(text), replyKeyboard, []int64{chatID})
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructRegisterWithSchool(ctx context.Context, chatID int64, schools map[uuid.UUID]string) error {
	text := "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –∑–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –≤–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è."
	buttons := make([][]models.InlineKeyboardButton, 0)
	for id, v := range schools {
		callbackData := fmt.Sprintf("/last-step %s", id)
		buttons = append(buttons, []models.InlineKeyboardButton{{
			Text:         v,
			CallbackData: callbackData,
		}})
	}
	kb := &models.InlineKeyboardMarkup{InlineKeyboard: buttons}
	err := c.sendMessageWithButtonsToChatIDs(ctx, bot.EscapeMarkdown(text), kb, []int64{chatID})
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructRegisterWithStep(ctx context.Context, chatID int64, step entity.StepType, data map[uuid.UUID]string) error {
	var text string
	switch step {
	case entity.StepFirstName:
		text = "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è"
	case entity.StepLastname:
		text = "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é"
	case entity.StepPhone:
		c.ConstructRegisterPhone(ctx, chatID)
		//text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7–•–•–•–•–•–•–•–•–•–•"
	case entity.StepSchool:
		c.ConstructRegisterWithSchool(ctx, chatID, data)
	default:
		text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!"

	}

	err := c.sendMessageToChatIDs(ctx, bot.EscapeMarkdown(text), []int64{chatID})
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructMasterHelpAndSend(ctx context.Context, chatIDs []int64) error {
	text := getHelpBasicText()

	text += bot.EscapeMarkdown(getHelpUserText() + getHelpMasterText())
	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–£–∑–Ω–∞—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
					CallbackData: "/next_training",
				},
			},
			{
				{
					Text:         "–°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤",
					CallbackData: "/subscription_list",
				},
			},
			{
				{
					Text:         "–û—Ç–º–µ—Ç–∏—Ç—å –ª—é–¥–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ",
					CallbackData: "/subscription_quiz",
				},
			},

			{
				{
					Text:         "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
					CallbackData: "/schedule",
				},
			},
		},
	}
	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructStartAttachedAndSend(ctx context.Context,
	chatIDs []int64,
	fioFull string) error {
	text := fmt.Sprintf(
		"‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ *%s*, "+
			"–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥—Ä—É–≥—É—é ‚Äî —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
		bot.EscapeMarkdownUnescaped(fioFull))

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         fmt.Sprintf("–í—ã–π—Ç–∏ –∏–∑ %s", fioFull),
					CallbackData: "/detach",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructStartAutoAndSend(ctx context.Context, chatIDs []int64, username string) error {
	text := fmt.Sprintf(
		"üëã –ü—Ä–∏–≤–µ—Ç %s\\!"+
			"\n\n"+
			"–≠—Ç–æ –±–æ—Ç HMB Schools\\. "+
			"–ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –º—ã —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\\."+
			"\n\n"+
			"ü•ë –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ *%s* –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"+
			"\n\n"+
			"_–ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç ‚Äì –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é, "+
			"–¥–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ—é —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å_",
		username,
		username)

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
					CallbackData: "/register",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructStartManualAndSend(ctx context.Context, chatIDs []int64, username string) error {
	text := fmt.Sprintf(
		"üëã –ü—Ä–∏–≤–µ—Ç, %s\\!"+
			"\n\n"+
			"–≠—Ç–æ –±–æ—Ç HMB Schools\\. "+
			"–ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –º—ã —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\\."+
			"\n\n"+
			"üêí–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É"+
			"\n\n"+
			"/register"+
			"\n\n"+
			"üê£–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç—Ä–µ–Ω–µ—Ä–æ–º, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
		username)

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–í–æ–π—Ç–∏",
					CallbackData: "/start",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructDetachedAndSend(ctx context.Context, chatIDs []int64) error {
	text := "üñá –û—Ç–≤—è–∑–∞–ª–∏ –±–æ—Ç–∞ –æ—Ç –≤–∞—à–µ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å *–Ω–µ –±—É–¥—É—Ç*" +
		"\n\n" +
		"–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ ‚Äî –≤–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑ üëá"

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–í–æ–π—Ç–∏",
					CallbackData: "/start",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructDetachDetachedAndSend(ctx context.Context, chatIDs []int64) error {
	text := "üëÄ –ü–æ—Ö–æ–∂–µ, –±–æ—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ HMB Schools" +
		"\n\n" +
		"_–ù–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å ‚Äî –æ—Å—Ç–∞–≤–ª—è—é —ç—Ç—É –∫–Ω–æ–ø–∫—É –∑–¥–µ—Å—å_ üëá"

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–í–æ–π—Ç–∏",
					CallbackData: "/start",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructAttachedAndSend(ctx context.Context, chatIDs []int64, schoolName string) error {
	text := fmt.Sprintf("‚úÖ –ì–æ—Ç–æ–≤–æ\\!\n\n"+
		"üîó –ü—Ä–∏–≤—è–∑–∞–ª–∏ –±–æ—Ç–∞ –∫ *%s*\\. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\\.", schoolName)

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–£–∑–Ω–∞—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
					CallbackData: "/next_training",
				},
			},
			{
				{
					Text:         "–£–∑–Ω–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞",
					CallbackData: "/subscriptions",
				},
			},
			{
				{
					Text:         "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
					CallbackData: "/schedule",
				},
			},
		},
	}

	err := c.sendMessageWithButtonsToChatIDs(ctx, text, kb, chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) ConstructScheduleAndSend(ctx context.Context, chatIDs []int64, fioFull string, schoolName string, price int, desc string, schedule entity.Schedule) error {
	text := fmt.Sprintf(
		`ü•äü•äü•ä%s, –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≤ '%s':
`, fioFull, schoolName)
	for _, v := range schedule {
		text += fmt.Sprintf("\nüïó%s:%s, c %s –ø–æ %s\n", v.Day, v.Description, v.Time.Open, v.Time.Closed)
	}
	text += fmt.Sprintf("\n—Ü–µ–Ω–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: üî•%v —Ä.\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n%s", price, desc)
	err := c.sendMessageToChatIDs(ctx, bot.EscapeMarkdown(text), chatIDs)
	if err != nil {
		return err
	}

	return nil
}

func (c *constructor) sendMessageWithButtonsToChatIDs(ctx context.Context, text string, kb models.ReplyMarkup, chatIDs []int64) error {
	if len(chatIDs) == 0 {
		return nil
	}

	for _, chatID := range chatIDs {
		c.sender.SendMessageWithButtons(ctx, text, fmt.Sprint(chatID), kb)
	}

	return nil
}

func (c *constructor) sendPollToChatIDs(ctx context.Context, text string, opts []string, chatIDs []int64) error {
	if len(chatIDs) == 0 {
		return nil
	}

	for _, chatID := range chatIDs {
		c.sender.SendPoll(ctx, text, opts, fmt.Sprint(chatID))
	}

	return nil
}

func (c *constructor) sendMessageToChatIDs(ctx context.Context, text string, chatIDs []int64) error {
	if len(chatIDs) == 0 {
		return nil
	}

	for _, chatID := range chatIDs {
		c.sender.SendMessage(ctx, text, fmt.Sprint(chatID))
	}

	return nil
}

func getHelpBasicText() string {
	return "‚ÑπÔ∏è –≠—Ç–æ ‚Äì –±–æ—Ç HMB Schools\\. –ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –º—ã —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\\." +
		"\n\n" +
		"üëâ –ö–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:" +
		"\n\n" +
		"/start ‚Äì –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —à–∫–æ–ª –ò–°–ë –†–æ—Å—Å–∏–∏;\n" +
		"/register ‚Äì —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ;\n" +
		"/info ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å, –∫ –∫–∞–∫–æ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –±–æ—Ç;\n" +
		"/detach ‚Äì –æ—Ç–≤—è–∑–∞—Ç—å –±–æ—Ç–∞ –æ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞;\n" +
		"/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\\;"
}

func getHelpUserText() string {
	return `

	/subscriptions ‚Äì –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞;

	/schedule ‚Äì –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ª–∞ –≤–º–µ—Å—Ç–µ —Å —Ü–µ–Ω–æ–π;

	/next_training ‚Äì –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏;
`
}
func getHelpMasterText() string {
	return `

–ú–∞—Å—Ç–µ—Ä-–∫–æ–º–∞–Ω–¥—ã:

	/subscription_list - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Å –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏;

	/hard_invite {username} {phone} {firstname} {lastname} ‚Äì –∂–µ—Å—Ç–∫–∏–π –∏–Ω–≤–∞–π—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≤–∞—à—É —Å–µ–∫—Ü–∏—é;

	>>>–ü—Ä–∏–º–µ—Ä: /hard_invite - 71234567890 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤


	/set_subscriptions {phone} {days} {*price} ‚Äì –î–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç;

	>>>–ü—Ä–∏–º–µ—Ä: /set_subscriptions 71234567890 1 500


	/set_schedule {day:openTime:closeTime:description;day:open:close:description;...} ‚Äì –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π;

	>>>–ü—Ä–∏–º–µ—Ä: /set_schedule –ø–Ω:10-00:12-00:–ë–æ—Ä—å–±–∞;—Å—Ä:10-00:12-00:–ö—Ä–æ—Å—Å—Ñ–∏—Ç –∏ –ø—Ä–æ—á–∏–µ –∫—Ä—É—Ç—ã–µ —à—Ç—É–∫–∏;–ø—Ç:20-00:22-00: –∂–µ–ª–µ–∑–æ


	//set_desc_and_price_schedule {price} {description} ‚Äì –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≤ –º–µ—Å—è—Ü;
	
	>>>–ü—Ä–∏–º–µ—Ä: /set_desc_and_price_schedule 5000; —É –Ω–∞—Å —Å–∞–º—ã–π –ª—É—á—à–∏–π —Ç—Ä–µ–Ω–µ—Ä –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –∑–µ–º–ª—è –ò–≤–∞–Ω –ò–≤–∞–Ω—ã—á


	/set_master {phone} ‚Äì –¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–ø—Ä–∞–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
	
	>>>–ü—Ä–∏–º–µ—Ä: /set_master 71234567890 12


	/create_ticket {username} ‚Äì —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è;(—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å username)
	
	>>>–ü—Ä–∏–º–µ—Ä: /create_ticket  megaUser


P.S. username - –∫–∞–∫ –≤ —Ç–µ–ª–µ–≥–µ,–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å—Ç–∞–≤–∏–º –ø—Ä–æ—á–µ—Ä–∫('-') phone - —Ñ–æ—Ä–º–∞—Ç–∞ 7–•–•–•–•–•–•–•–•–•–•
P.S.S –≥–¥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ '*', –Ω–∞–ø—Ä–∏–º–µ—Ä *price - –∑–Ω–∞—á–∏—Ç –µ—Å–ª–∏ –≤—ã –µ–≥–æ –Ω–µ –≤–≤–µ–¥–µ—Ç–µ, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –≤–∞—à–µ–º –∑–∞–ª–µ.
`
}
